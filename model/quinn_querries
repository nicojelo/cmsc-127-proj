
	CREATING THE DATABASE

	1) // created the database via "create DATABASE cmsc_127_project" command

	2) // created the tables

--CUSTOMER TABLE
create TABLE rewardcard (
	cardId int(4) AUTO_INCREMENT,
	lName VARCHAR(16),
	fName VARCHAR(32),
	mName VARCHAR(16),
	CONSTRAINT rewardcard_cardid_pk PRIMARY KEY(cardId)
);

--REWARD_POINTS TABLE
create table rewardcard_points (
	cardId int(4) AUTO_INCREMENT,
	validPoints int(3),
	usedPoints int(3),
	CONSTRAINT rewardcardpoints_cardId_pk PRIMARY KEY(cardId)
);

--REWARD_STARS TABLE
create table rewardcard_stars (
	cardId int(4) AUTO_INCREMENT,
	productId int(4),
	validStars int(3),
	expirationDate date,
	usedStars int(3),
	CONSTRAINT rewardcardstars_cardidproductid_pk PRIMARY KEY(cardId,productId)
);

--BRANCH TABLE
create table branch(
	branchId int(2),
	location VARCHAR(32),
	CONSTRAINT branch_branchId_pk PRIMARY KEY(branchId)
);

-- PRODUCT TABLE
create table product(
	productId int(4),
	productName varchar(32),
	priceCost float(6,2),
	starCost float(6,2),
	starProductId int(4),
	starValue float(6,2),
	stocksAvailable int(3),
	stocksSold int(3),
	branchId int(2),
	CONSTRAINT product_productid_pk PRIMARY KEY(productId),
	CONSTRAINT product_branchid_fk FOREIGN KEY(branchId)
	REFERENCES branch(branchId)
);

--PROMO TABLE
create table promo(
	promoId int(3),
	promoStart date,
	promoEnd date,
	CONSTRAINT promo_promoid_pk PRIMARY KEY(promoId)
);

-- PRODUCTS IN PROMO TABLE
create table promo_product(
	promoId int(3),
	productId int(3),
	CONSTRAINT productpromo_promoidproductid_pk PRIMARY KEY(promoId, productId)
);

-- ORDER TABLE
create TABLE transaction_order(
	transactionId int(4),
	quantity int(2),
	price float(6,2),
	productId int(4),
	totalPrice float(7,2),
	CONSTRAINT order_orderid_pk PRIMARY KEY(transactionId)
);

-- TRANSACTION TABLE
create TABLE transaction(
	transactionId int(4) AUTO_INCREMENT,
	transacDate datetime,
	totalPrice int(6),
	type VARCHAR(3),
	amountPaid float(7,2),
	changeAmount float(6,2),
	CONSTRAINT transaction_transactionid_pk PRIMARY KEY(transactionId)
);

-- TRANSCATION BRANCH
create TABLE transaction_branch(
	transactionId int(4),
	branchId int(2),
	CONSTRAINT transactionbranch_transidbranchid_pk PRIMARY KEY(transactionId, branchId)
);


-- TRANSACTION_REWARD CARD TABLE
create TABLE transaction_rewardcard(
	cardId int(4),
	transactionId int(4),
	CONSTRAINT transactionrewardcard_cardidtransid_pk PRIMARY KEY (cardId, transactionId)
);

	-- 2) Creating users

	-- 3) Creating triggers: procedure

-- Insert Customer Procedure --
CREATE PROCEDURE insertCustomer(
	a varchar(16),
	b varchar(32),
	c varchar(16)
) BEGIN
INSERT INTO rewardcard(lName,fName,mName) values(a,b,c);
INSERT INTO rewardcard_points(validPoints,usedPoints) values(0,0);
END //

-- Insert Product Procedure --
CREATE PROCEDURE insertProduct(
	a int(4),
	b varchar(32),
	c float(6,2),
	d int(3),
	e int(2)
) BEGIN
INSERT INTO product(productId,productName,priceCost,stocksAvailable,stocksSold,branchId) values(a,b,c,d,0,e);
END //

-- Insert Promo Procedure --
CREATE PROCEDURE insertPromo(
	a int(3),
	b varchar(10), 
	c varchar(10)
) BEGIN
INSERT INTO promo values(a,STR_TO_DATE(b,"%m/%d/%Y"),STR_TO_DATE(c,"%m/%d/%Y"));
END //

-- Insert Product To Promo ==
CREATE PROCEDURE insertProductToPromo(
	a int(3),
	b int(4),
	c float(6,2),
	d int(4),
	e float(6,2)
) BEGIN
INSERT INTO promo_product values(a,b);
UPDATE product set starValue=c where productId=b;
UPDATE product set starProductId=b where productId=d;
UPDATE product set starCost=e where productId=d;
END //

-- Create New Transaction --
CREATE PROCEDURE createTransaction(
	typetemp varchar(3),
	amountPaidtemp float(6,2)
) BEGIN
INSERT INTO transaction(transacDate,type,amountPaid) values(now(),typetemp,amountPaidtemp);
END //

-- Insert Product To Order --
CREATE PROCEDURE buyProduct(
branchidtemp int(2),
transactionIdtemp int(4),
qty int(2),
productIdtemp int(4)
) BEGIN
insert into transaction_order values (transactionIdtemp,qty,(select priceCost from product p where p.productId=productIdtemp), productIdtemp, qty*(select priceCost from product p where p.productId=productIdtemp));
insert into transaction_branch values(transactionIdtemp,branchidtemp);
update product set stocksAvailable=stocksAvailable-qty where productId=productIdtemp;
update product set stocksSold=stocksSold+qty where productId=productIdtemp;
update transaction set branchId=branchidtemp;
update transaction set totalPrice=(select SUM(totalPrice) from transaction_order o where o.transactionId=transactionIdtemp);
update transaction set changeAmount=amountPaid-totalPrice where transactionId=transactionIdtemp;
END //

CREATE PROCEDURE recordReward(
transactionIdTemp int(4),
cardIdTemp int(4)
) BEGIN
INSERT into transaction_rewardcard values(cardIdTemp, transactionIdTemp);
UPDATE rewardcard_points SET validPoints=validPoints+((select totalPrice from transaction where transaction.transactionId=transactionIdTemp)/5);
END //

	-- TRANSACTION AND TRANSACTION_BRANCH: type, amountpaid, branchid
			-- in computing for transaction, check type and amountpaid
	-- TRANSACTION REWARDCARD
			-- REWARDCARD_STARS: productid

	-- 3) Initialize values to tables

	-- Branch
insert into branch values (10, "SU Building");
insert into branch values (20, "Elbi Square");
insert into branch values (30, "Agapita St.");
insert into branch values (40, "Junction");

--Product
call insertProduct(9000,"Big Byte Hotdog",25,10,10);
call insertProduct(9001,"Spicy Byte Hotdog",27, 10, 10);
call insertProduct(9002,"Super Byte Hotdog",30, 10, 10);

--Customer
call insertCustomer("Mercado", "Nico Angelo", "Lopez");

--Promo
call insertPromo(1010,"01/01/2018","02/01/2018");
--REQUIRED TO insertProductToPromo

--Product To Promo(promoid, productidnanasapromo, star value, productidnawalasapromo, star cost)
call insertProductToPromo(1010,9000,0.5,9002,3);

	